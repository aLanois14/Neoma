@model IEnumerable<Neoma.Models.Projet>
@using Neoma.Extensions

@{
    ViewData["Title"] = "Sélections";
}

@section Scripts{
    <script src="~/js/CandidatGlobal.js"></script>
    <script type="text/javascript" src="~/js/filtersearchcandidat.js"></script>
    <script type="text/javascript" src="~/js/pagination.js"></script>
    <script>
        $(function () {
            $(".Projet").prop('selectIndex', 0);
            $(".Role").attr("disabled", "disabled");

            $("body").on("change", ".Projet", function () {
                //Si l'élément tous projet est sélectionné alors désactivation de la zone rôle
                accessibilityFilterProject($(this)[0].selectedIndex);
                var specialite = $(this).parent().parent().find(".specialite");
                var role = $(this).parent().parent().find(".Role");
                var projet = $(this).val();

                $.ajax({
                    type: "GET",
                    url: '@Url.Action("UpdateRole", "Selections")',
                    contentType: "application/json; charset=utf-8",
                    datatype: "json",
                    data: { 'projet': projet },
                    success: function (data) {
                        role.find('option').remove();
                        specialite.find('option').remove();
                        $.each(data, function (key, value) {
                            role.append($("<option></option>")
                                .attr("value", value.id).text(value.role.name));
                        });
                    }
                });
                if ($(this)[0].selectedIndex == 0) {
                    var FilterViewModel = null;
                    var items = JSON.stringify(FilterViewModel);
                    UpdateCall(items);
                }
                else {
                    updateCandidat(true);
                }
            })

            $("body").on("change", ".Role", function () {
                accessibilityFilterRole($(this)[0].selectedIndex);

                var specialite = $(this).parent().parent().find(".specialite");

                var RoleModel = {};
                RoleModel.Role = $(this).val();
                RoleModel.Projet = $(this).parent().parent().find(".Projet").val();
                var role = JSON.stringify(RoleModel);

                var Besoins = {};
                Besoins.Id = $(this).val();
                var FilterViewModel = {};
                FilterViewModel.Besoins = Besoins;
                var chaineRecherche = $("#searchText").val();
                FilterViewModel.TexteRecherche = chaineRecherche ? chaineRecherche.toLowerCase() : chaineRecherche;
                var items = JSON.stringify(FilterViewModel);
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("UpdateSpecialite", "Selections")',
                    contentType: "application/json; charset=utf-8",
                    datatype: "json",
                    data: role ,
                    success: function (data) {
                        specialite.find('option').remove();
                        $.each(data, function (key, value) {
                            specialite.append($("<option></option>")
                                .attr("value", value.id).text(value.name));
                        });
                    }
                });
                UpdateCall(items);
            });

            $('.make-select2').on('select2:unselect', function () {
                updateCandidat();
            });

            $('.make-select2').on('select2:select', function () {
                updateCandidat();
            });

            function updateCandidat(changementDeProjet) {
                var specialite = $(".specialite").select2('data');
                var Besoins = {};
                Besoins.Id = $(".Role").val() !== null ? $(".Role").val() : 0;
                var FilterViewModel = {};
                var ListeSpecialite = [];
                $.each(specialite, function (n) {
                    var Specialite = {};
                    Specialite.Id = specialite[n].id;
                    Specialite.Name = specialite[n].text;
                    ListeSpecialite[n] = Specialite;
                });
                var chaineRecherche = $("#searchText").val();
                FilterViewModel.Specialite = ListeSpecialite;
                FilterViewModel.Besoins = Besoins;
                FilterViewModel.TexteRecherche = chaineRecherche ? chaineRecherche.toLowerCase() : chaineRecherche;

                if (changementDeProjet || Besoins.Id === "0") {
                    var projetId = $(".Projet").val();
                    var projet = {};
                    projet.Id = projetId;
                    FilterViewModel.Projet = projet;
                }

                var items = JSON.stringify(FilterViewModel);
                UpdateCall(items);
            };

            function UpdateCall(items) {
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("TableSelection", "Selections")',
                    contentType: "application/json; charset=utf-8",
                    datatype: "json",
                    data: items,
                    success: function (data) {
                        $("#tableCandidat").html(data);
                        $(".rateStar").rateYo({
                            readOnly: true
                        });
                        var len = $("#tableCandidat .item").length;
                        if (len > 1) {
                            $(".result").html('<b class="color-violet">' + len + '</b> co-surfeurs correspondent à votre recherche');
                        }
                        else {
                            $(".result").html('<b class="color-violet">' + len + '</b> co-surfeur correspond à votre recherche');
                        }
                        HighlightSearch();
                        $("#maxRows").change();
                    }
                });
            };

            $('#searchText').keyup(delay(function () {
                updateCandidat()
            }, 1000));

            function delay(callback, ms) {
                var timer = 0;
                return function () {
                    var context = this, args = arguments;
                    clearTimeout(timer);
                    time = setTimeout(function () {
                        callback.apply(context, args);
                    }, ms || 0);
                };
            }

            getPagination('.items-listing');

            $(".rateStar").rateYo({
               readOnly: true
            })

            $("body").on("click", ".validate", function (e) {
                var link = $(this);
                e.preventDefault();
                $.confirm({
                    title: 'Confirmation',
                    content: 'Voulez-vous valider votre sélection ?',
                    buttons: {
                        Valider: function () {
                            window.location.href = link.attr("href");
                            return true;
                        },
                        Annuler: function () {
                            return true;
                        }
                    }
                });
            })

            $("body").on("click", ".delete", function (e) {
                var link = $(this);
                e.preventDefault();
                $.confirm({
                    title: 'Confirmation',
                    content: 'Voulez-vous supprimer ce candidat de vos sélections ?',
                    buttons: {
                        Valider: function () {
                            window.location.href = link.attr("href");
                            return true;
                        },
                        Annuler: function () {
                            return true;
                        }
                    }
                });
            })
        })
    </script>
}
<div class="page-top">
    <nav class="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                <a href="#">Accueil</a>
            </li>
            <li class="breadcrumb-item">
                <a>Co-surfeurs</a>
            </li>
            <li class="breadcrumb-item active">
                Mes sélections
            </li>
        </ol>
    </nav>
</div>

<div class="row justify-content-md-center">
    <div class="col-md-12">
        <section class="neobox">
            <div class="neobox-header">
                <div class="neobox-header-container">
                    <div class="neo-select-control">
                        <label>Type de projet</label>
                        <select asp-items="Model.ToSelectListItem(0)" class="Projet"></select>
                    </div>
                    <div class="neo-select-control">
                        <label>Rôle</label>
                        <select class="Role"></select>
                    </div>
                    <div class="neo-select2-control">
                        <select class="make-select2 specialite" multiple="multiple"></select>
                    </div>
                    <div class="neo-select-control">
                        <label>Ligne à afficher</label>
                        <select id="maxRows">
                            <option value="5">5</option>
                            <option value="10">10</option>
                            <option value="50">50</option>
                            <option value="0" selected>Tous</option>
                        </select>
                    </div>
                </div>

                <div class="neobox-header-container">
                    <div class="neo-search-control">
                        <i class="icon-search"></i>
                        <input id="searchText" type="text" class="form-control" placeholder="Rechercher" />
                    </div>
                    <div class="btn-group ml-2">
                        <span class="btn btn-outline btn-grid">
                            <i class="fa fa-grip-horizontal"></i>
                        </span>
                        <span class="btn btn-outline btn-list active">
                            <i class="fa fa-list"></i>
                        </span>
                    </div>
                </div>
            </div>
            <div class="neobox-content">
                <div class="items-listing-number-result">
                    <p class="color-grey result">
                        <!-- <b class="color-violet">152</b> candidats correspondent à votre recherche -->
                    </p>
                </div>
            </div>
            <div class="neobox-content p-0">
                <div id="tableCandidat">
                    @await Component.InvokeAsync("TableSelectionPorteur", null)
                </div>
            </div>
        </section>

        <div class="neo-pagination mt-5 mb-5">
            <div class="neo-pagination-left">
                <a class="neo-pagination-link">
                    <i class="icon-start"></i>
                </a>
            </div>
            
            <div class="neo-pagination-center">
            </div>
            
            <div class="neo-pagination-right">
                <a class="neo-pagination-link">
                    <i class="icon-end"></i>
                </a>
            </div>
        </div>

    </div>
</div>